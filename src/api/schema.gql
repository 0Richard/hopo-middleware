type Dwelling {
  id: ID!
  sub_id: ID!
  name: String!
  address: Address!
  dwellingType: String!
  created: String!
  updated: String
  rooms: [Room!]
  totalRooms: Int!
  totalItems: Int!
  totalValue: Float!
}

type Room {
  id: ID!
  dwelling_id: ID!
  sub_id: ID!
  name: String!
  roomType: String!
  imageUrl: String
  thumbnailUrl: String
  created: String!
  updated: String
  items: [Item!]
  itemCount: Int!
  totalValue: Float!
}

type Item {
  id: ID!
  room_id: ID!
  sub_id: ID!
  name: String!
  description: String
  details: ItemDetails
  price: Price!
  quantity: Int!
  retailer: String
  created: String!
  updated: String
}

type Address {
  line1: String!
  line2: String
  city: String!
  postCode: String!
}

type ItemDetails {
  brand: String
  model: String
  serialNumber: String
}

type Price {
  amount: Float!
  currency: String!
}

type SearchResult {
  dwellings: [Dwelling!]
  rooms: [Room!]
  items: [Item!]
}

input CreateDwellingInput {
  name: String!
  address: AddressInput!
  dwellingType: String!
}

input UpdateDwellingInput {
  name: String
  address: AddressInput
  dwellingType: String
}

input AddressInput {
  line1: String!
  line2: String
  city: String!
  postCode: String!
}

input CreateRoomInput {
  dwelling_id: ID!
  name: String!
  roomType: String!
}

input UpdateRoomInput {
  name: String
  roomType: String
}

input CreateItemInput {
  room_id: ID!
  name: String!
  description: String
  details: ItemDetailsInput
  price: PriceInput!
  quantity: Int!
  retailer: String
}

input UpdateItemInput {
  name: String
  description: String
  details: ItemDetailsInput
  price: PriceInput
  quantity: Int
  retailer: String
}

input ItemDetailsInput {
  brand: String
  model: String
  serialNumber: String
}

input PriceInput {
  amount: Float!
  currency: String!
}

input DwellingFilter {
  type: String
  search: String
}

input RoomFilter {
  type: String
  search: String
}

input ItemFilter {
  priceRange: PriceRange
  search: String
}

input PriceRange {
  min: Float
  max: Float
}

input SortInput {
  field: String!
  direction: SortDirection!
}

enum SortDirection {
  ASC
  DESC
}

type Query {
  # Dwelling Queries
  dwelling(id: ID!): Dwelling
  dwellings(filter: DwellingFilter, sort: SortInput): [Dwelling!]!
  myDwelling: Dwelling
  
  # Room Queries
  room(id: ID!): Room
  rooms(dwelling_id: ID!, filter: RoomFilter, sort: SortInput): [Room!]!
  
  # Item Queries
  item(id: ID!): Item
  items(room_id: ID!, filter: ItemFilter, sort: SortInput): [Item!]!
  
  # Search
  search(term: String!, entityType: String): SearchResult!
}

type Mutation {
  # Dwelling Mutations
  createDwelling(input: CreateDwellingInput!): Dwelling!
  updateDwelling(id: ID!, input: UpdateDwellingInput!): Dwelling!
  deleteDwelling(id: ID!): Boolean!
  
  # Room Mutations
  createRoom(input: CreateRoomInput!): Room!
  updateRoom(id: ID!, input: UpdateRoomInput!): Room!
  deleteRoom(id: ID!): Boolean!
  uploadRoomImage(id: ID!, file: Upload!): Room!
  
  # Item Mutations
  createItem(input: CreateItemInput!): Item!
  updateItem(id: ID!, input: UpdateItemInput!): Item!
  deleteItem(id: ID!): Boolean!
}