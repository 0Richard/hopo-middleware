openapi: 3.0.0
info:
  title: Green Dwelling API
  version: '1.0.0'
  description: API for managing dwellings, rooms, and items

components:
  securitySchemes:
    CognitoAuth:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - ${COGNITO_USER_POOL_ARN}

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
          
    ValidationError:
      type: object
      properties:
        code:
          type: string
          enum: [VALIDATION_ERROR]
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    Dwelling:
      type: object
      required:
        - name
        - address
      properties:
        dwelling_id:
          type: string
        name:
          type: string
          minLength: 1
          maxLength: 100
        address:
          type: string
          minLength: 1
          maxLength: 200
        
    Room:
      type: object
      required:
        - dwelling_id
        - name
      properties:
        room_id:
          type: string
        dwelling_id:
          type: string
        name:
          type: string
          minLength: 1
          maxLength: 100
        
    Item:
      type: object
      required:
        - room_id
        - name
      properties:
        item_id:
          type: string
        room_id:
          type: string
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: UNAUTHORIZED
            message: Invalid or missing authentication token
            
    ValidationError:
      description: Invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: VALIDATION_ERROR
            message: Invalid input parameters
            errors:
              - field: name
                message: Name is required
                
    NotFoundError:
      description: Requested resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: NOT_FOUND
            message: Resource not found
            
    ForbiddenError:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: FORBIDDEN
            message: You don't have permission to access this resource

paths:
  /search:
    get:
      security:
        - CognitoAuth: []
      summary: Search dwellings
      operationId: searchDwellings
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.search.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dwelling'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
  /search/suggest:
    get:
      security:
        - CognitoAuth: []
      summary: Get search suggestions
      operationId: getSearchSuggestions
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.search-suggest.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: Search suggestions
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /user/login:
    post:
      summary: User login
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.user-login.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: Login successful
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /dwelling:
    get:
      security:
        - CognitoAuth: []
      summary: List dwellings
      operationId: listDwellings
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: nextToken
          in: query
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.dwelling-list.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: List of dwellings
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dwelling'
                  nextToken:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
          
    post:
      security:
        - CognitoAuth: []
      summary: Create dwelling
      operationId: createDwelling
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dwelling'
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.dwelling-create.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '201':
          description: Dwelling created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dwelling'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /dwelling/{dwelling_id}:
    parameters:
      - name: dwelling_id
        in: path
        required: true
        schema:
          type: string
    get:
      security:
        - CognitoAuth: []
      summary: Get dwelling
      operationId: getDwelling
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.dwelling-get.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: Dwelling details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dwelling'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
    put:
      security:
        - CognitoAuth: []
      summary: Update dwelling
      operationId: updateDwelling
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dwelling'
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.dwelling-update.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: Dwelling updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dwelling'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      security:
        - CognitoAuth: []
      summary: Delete dwelling
      operationId: deleteDwelling
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.dwelling-delete.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '204':
          description: Dwelling deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /room:
    get:
      security:
        - CognitoAuth: []
      summary: List rooms
      operationId: listRooms
      parameters:
        - name: dwelling_id
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: nextToken
          in: query
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.room-list.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                  nextToken:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
          
    post:
      security:
        - CognitoAuth: []
      summary: Create room
      operationId: createRoom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.room-create.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '201':
          description: Room created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Dwelling not found
          $ref: '#/components/responses/NotFoundError'

  /item:
    get:
      security:
        - CognitoAuth: []
      summary: List items
      operationId: listItems
      parameters:
        - name: room_id
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: nextToken
          in: query
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/${self:functions.item-list.name}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
                  nextToken:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
          
    post:
      security:
        - CognitoAuth: []
      summary: Create item
      operationId: createItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      x-amazon-apigateway-integration:
        uri: arn:aws:apigat