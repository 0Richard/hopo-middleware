type Dwelling @model @auth(rules: [{ allow: owner, ownerField: "sub_id" }]) {
  id: ID!
  sub_id: ID!
  name: String!
  address: Address!
  dwellingType: String!
  created: AWSDateTime!
  updated: AWSDateTime
  rooms: [Room!] @hasMany(indexName: "byDwelling", fields: ["id"])
  totalRooms: Int!
  totalItems: Int!
  totalValue: Float!
}

type Room @model @auth(rules: [{ allow: owner, ownerField: "sub_id" }]) {
  id: ID!
  dwelling_id: ID!
  sub_id: ID!
  name: String!
  roomType: String!
  imageUrl: String
  thumbnailUrl: String
  created: AWSDateTime!
  updated: AWSDateTime
  items: [Item!] @hasMany(indexName: "byRoom", fields: ["id"])
  itemCount: Int!
  totalValue: Float!
}

type Item @model @auth(rules: [{ allow: owner, ownerField: "sub_id" }]) {
  id: ID!
  room_id: ID!
  sub_id: ID!
  name: String!
  description: String
  details: ItemDetails
  price: Price!
  quantity: Int!
  retailer: String
  created: AWSDateTime!
  updated: AWSDateTime
}

type Address {
  line1: String!
  line2: String
  city: String!
  postCode: String!
}

type ItemDetails {
  brand: String
  model: String
  serialNumber: String
}

type Price {
  amount: Float!
  currency: String!
}

type SearchResult {
  dwellings: [Dwelling!]
  rooms: [Room!]
  items: [Item!]
}

input CreateDwellingInput {
  name: String!
  address: AddressInput!
  dwellingType: String!
}

input UpdateDwellingInput {
  name: String
  address: AddressInput
  dwellingType: String
}

input AddressInput {
  line1: String!
  line2: String
  city: String!
  postCode: String!
}

input CreateRoomInput {
  dwelling_id: ID!
  name: String!
  roomType: String!
}

input UpdateRoomInput {
  name: String
  roomType: String
}

input CreateItemInput {
  room_id: ID!
  name: String!
  description: String
  details: ItemDetailsInput
  price: PriceInput!
  quantity: Int!
  retailer: String
}

input UpdateItemInput {
  name: String
  description: String
  details: ItemDetailsInput
  price: PriceInput
  quantity: Int
  retailer: String
}

input ItemDetailsInput {
  brand: String
  model: String
  serialNumber: String
}

input PriceInput {
  amount: Float!
  currency: String!
}

input DwellingFilter {
  type: String
  search: String
}

input RoomFilter {
  type: String
  search: String
}

input ItemFilter {
  priceRange: PriceRange
  search: String
}

input PriceRange {
  min: Float
  max: Float
}

input SortInput {
  field: String!
  direction: SortDirection!
}

enum SortDirection {
  ASC
  DESC
}

type Query {
  # Dwelling Queries
  getDwelling(id: ID!): Dwelling @aws_auth
  listDwellings(filter: DwellingFilter, sort: SortInput): [Dwelling!]! @aws_auth
  getMyDwelling: Dwelling @aws_auth
  
  # Room Queries
  getRoom(id: ID!): Room @aws_auth
  listRooms(dwelling_id: ID!, filter: RoomFilter, sort: SortInput): [Room!]! @aws_auth
  
  # Item Queries
  getItem(id: ID!): Item @aws_auth
  listItems(room_id: ID!, filter: ItemFilter, sort: SortInput): [Item!]! @aws_auth
  
  # Search
  search(term: String!, entityType: String): SearchResult! @aws_auth
}

type Mutation {
  # Dwelling Mutations
  createDwelling(input: CreateDwellingInput!): Dwelling! @aws_auth
  updateDwelling(id: ID!, input: UpdateDwellingInput!): Dwelling! @aws_auth
  deleteDwelling(id: ID!): Boolean! @aws_auth
  
  # Room Mutations
  createRoom(input: CreateRoomInput!): Room! @aws_auth
  updateRoom(id: ID!, input: UpdateRoomInput!): Room! @aws_auth
  deleteRoom(id: ID!): Boolean! @aws_auth
  uploadRoomImage(id: ID!, file: Upload!): Room! @aws_auth
  
  # Item Mutations
  createItem(input: CreateItemInput!): Item! @aws_auth
  updateItem(id: ID!, input: UpdateItemInput!): Item! @aws_auth
  deleteItem(id: ID!): Boolean! @aws_auth
}

schema {
  query: Query
  mutation: Mutation
}
