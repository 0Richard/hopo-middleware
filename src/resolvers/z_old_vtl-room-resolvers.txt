## getRoom.request.vtl
{
  "version": "2018-05-29",
  "operation": "GetItem",
  "key": {
    "PK": { "S": "SUB#$context.identity.sub" },
    "SK": { "S": "ROOM#$ctx.args.id" }
  }
}

## getRoom.response.vtl
#if(!$ctx.result)
  $util.error("Room not found", "NotFound")
#end
#if($ctx.result.sub_id != $context.identity.sub)
  $util.unauthorized()
#end
$util.toJson($ctx.result)

## listRooms.request.vtl
{
  "version": "2018-05-29",
  "operation": "Query",
  "query": {
    "expression": "PK = :pk AND begins_with(SK, :sk)",
    "expressionValues": {
      ":pk": { "S": "SUB#$context.identity.sub" },
      ":sk": { "S": "ROOM#" }
    }
  }
  #if($ctx.args.dwelling_id)
    ,"filter": {
      "expression": "dwelling_id = :dwelling_id",
      "expressionValues": {
        ":dwelling_id": { "S": "$ctx.args.dwelling_id" }
      }
    }
  #end
  #if($ctx.args.filter)
    #if($ctx.args.filter.type)
      ,"expression": "#type = :type",
      "expressionNames": {
        "#type": "roomType"
      },
      "expressionValues": {
        ":type": { "S": "$ctx.args.filter.type" }
      }
    #end
  #end
  #if($ctx.args.sort)
    ,"scanIndexForward": #if($ctx.args.sort.direction == "DESC") false #else true #end
  #end
}

## listRooms.response.vtl
$util.toJson($ctx.result.items)

## createRoom.request.vtl
#set($id = $util.autoId())
{
  "version": "2018-05-29",
  "operation": "PutItem",
  "key": {
    "PK": { "S": "SUB#$context.identity.sub" },
    "SK": { "S": "ROOM#$id" }
  },
  "attributeValues": {
    "id": { "S": "$id" },
    "sub_id": { "S": "$context.identity.sub" },
    "dwelling_id": { "S": "$ctx.args.input.dwelling_id" },
    "type": { "S": "room" },
    "name": { "S": "$ctx.args.input.name" },
    "roomType": { "S": "$ctx.args.input.roomType" },
    "created": { "S": "$util.time.nowISO8601()" },
    "updated": { "S": "$util.time.nowISO8601()" }
  }
}

## createRoom.response.vtl
$util.toJson($ctx.result)
