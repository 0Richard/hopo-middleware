## getDwelling.request.vtl
{
  "version": "2018-05-29",
  "operation": "GetItem",
  "key": {
    "PK": { "S": "SUB#$context.identity.sub" },
    "SK": { "S": "DWELLING#$ctx.args.id" }
  }
}

## getDwelling.response.vtl
#if(!$ctx.result)
  $util.error("Dwelling not found", "NotFound")
#end
#if($ctx.result.sub_id != $context.identity.sub)
  $util.unauthorized()
#end
$util.toJson($ctx.result)

## listDwellings.request.vtl
{
  "version": "2018-05-29",
  "operation": "Query",
  "query": {
    "expression": "PK = :pk",
    "expressionValues": {
      ":pk": { "S": "SUB#$context.identity.sub" }
    }
  },
  "filter": {
    "expression": "begins_with(SK, :sk)",
    "expressionValues": {
      ":sk": { "S": "DWELLING#" }
    }
  }
  #if($ctx.args.filter)
    #if($ctx.args.filter.type)
      ,"expression": "#type = :type",
      "expressionNames": {
        "#type": "dwellingType"
      },
      "expressionValues": {
        ":type": { "S": "$ctx.args.filter.type" }
      }
    #end
  #end
  #if($ctx.args.sort)
    ,"scanIndexForward": #if($ctx.args.sort.direction == "DESC") false #else true #end
  #end
}

## listDwellings.response.vtl
$util.toJson($ctx.result.items)

## createDwelling.request.vtl
#set($id = $util.autoId())
{
  "version": "2018-05-29",
  "operation": "PutItem",
  "key": {
    "PK": { "S": "SUB#$context.identity.sub" },
    "SK": { "S": "DWELLING#$id" }
  },
  "attributeValues": {
    "id": { "S": "$id" },
    "sub_id": { "S": "$context.identity.sub" },
    "type": { "S": "dwelling" },
    "name": { "S": "$ctx.args.input.name" },
    "dwellingType": { "S": "$ctx.args.input.dwellingType" },
    "address": $util.dynamodb.toDynamoDBJson($ctx.args.input.address),
    "created": { "S": "$util.time.nowISO8601()" },
    "updated": { "S": "$util.time.nowISO8601()" }
  },
  "condition": {
    "expression": "attribute_not_exists(PK) AND attribute_not_exists(SK)"
  }
}

## createDwelling.response.vtl
$util.toJson($ctx.result)

## updateDwelling.request.vtl
{
  "version": "2018-05-29",
  "operation": "UpdateItem",
  "key": {
    "PK": { "S": "SUB#$context.identity.sub" },
    "SK": { "S": "DWELLING#$ctx.args.id" }
  },
  "update": {
    "expression": "SET #updated = :updated",
    "expressionNames": {
      "#updated": "updated"
    },
    "expressionValues": {
      ":updated": { "S": "$util.time.nowISO8601()" }
    }
  }
  #if($ctx.args.input.name)
    #set($expression = $expression + ", #name = :name")
    #set($expressionNames.put("#name", "name"))
    #set($expressionValues.put(":name", { "S": "$ctx.args.input.name" }))
  #end
  #if($ctx.args.input.dwellingType)
    #set($expression = $expression + ", #type = :type")
    #set($expressionNames.put("#type", "dwellingType"))
    #set($expressionValues.put(":type", { "S": "$ctx.args.input.dwellingType" }))
  #end
  #if($ctx.args.input.address)
    #set($expression = $expression + ", #address = :address")
    #set($expressionNames.put("#address", "address"))
    #set($expressionValues.put(":address", $util.dynamodb.toDynamoDBJson($ctx.args.input.address)))
  #end,
  "condition": {
    "expression": "attribute_exists(PK) AND #sub_id = :sub_id",
    "expressionNames": {
      "#sub_id": "sub_id"
    },
    "expressionValues": {
      ":sub_id": { "S": "$context.identity.sub" }
    }
  }
}

## updateDwelling.response.vtl
#if(!$ctx.result)
  $util.error("Dwelling not found", "NotFound")
#end
$util.toJson($ctx.result)

## deleteDwelling.request.vtl
{
  "version": "2018-05-29",
  "operation": "DeleteItem",
  "key": {
    "PK": { "S": "SUB#$context.identity.sub" },
    "SK": { "S": "DWELLING#$ctx.args.id" }
  },
  "condition": {
    "expression": "attribute_exists(PK) AND #sub_id = :sub_id",
    "expressionNames": {
      "#sub_id": "sub_id"
    },
    "expressionValues": {
      ":sub_id": { "S": "$context.identity.sub" }
    }
  }
}

## deleteDwelling.response.vtl
#if($ctx.error)
  $util.error($ctx.error.message, $ctx.error.type)
#end
$util.toJson(true)
