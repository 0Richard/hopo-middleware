service: hopo

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, env:AWS_REGION, 'eu-west-2'}
  stage: ${opt:stage, env:STAGE, 'dev'}
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    IMAGE_BUCKET: ${self:service}-images-${self:provider.stage}
    THUMBNAIL_WIDTH: ${env:THUMBNAIL_WIDTH, 150}
    THUMBNAIL_HEIGHT: ${env:THUMBNAIL_HEIGHT, 150}
    THUMBNAIL_QUALITY: ${env:THUMBNAIL_QUALITY, 80}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - !GetAtt DynamodbTable.Arn
            - !Join ['', [!GetAtt DynamodbTable.Arn, '/index/*']]
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: !Join ['', [!GetAtt ImageBucket.Arn, '/*']]
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminRespondToAuthChallenge
          Resource: !GetAtt CognitoUserPool.Arn

plugins:
  - serverless-appsync-plugin
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: 'npm'
    
  appSync:
    name: ${self:service}-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      userPoolId: !Ref CognitoUserPool
      defaultAction: ALLOW
    schema: src/schema.gql
    mappingTemplatesLocation: src/resolvers
    mappingTemplates: ${file(src/resources/mapping-templates.yml)}
    dataSources:
      - type: AMAZON_DYNAMODB
        name: DynamoDBDataSource
        config:
          tableName: !Ref DynamodbTable
      - type: AWS_LAMBDA
        name: ImageProcessorDataSource
        config:
          functionName: imageProcessor
      - type: NONE
        name: NoneDataSource


functions:
  # JS Resolver Lambdas
  getMyDwelling:
    handler: src/resolvers/dwelling/js-dwelling-resolvers.handler
    events:
      - http:
          path: dwelling/my
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  search:
    handler: src/resolvers/js-search-resolver.handler
    events:
      - http:
          path: search
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  uploadRoomImage:
    handler: src/resolvers/room/js-room-image-resolver.handler
    events:
      - http:
          path: room/image
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  # Image Processing
  imageProcessor:
    handler: src/functions/imageProcessor.handler
    events:
      - s3:
          bucket: ${self:provider.environment.IMAGE_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg

resources:
  - ${file(src/resources/dynamodb.yml)}
  - ${file(src/resources/cognito.yml)}
  - ${file(src/resources/s3.yml)}

  Outputs:
    AppSyncApiUrl:
      Value: !GetAtt GraphQLApi.GraphQLUrl
    AppSyncApiId:
      Value: !GetAtt GraphQLApi.ApiId
    UserPoolId:
      Value: !Ref CognitoUserPool
    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient