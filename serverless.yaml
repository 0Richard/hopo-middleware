service: hopo

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, env:AWS_REGION, 'eu-west-2'}
  stage: ${opt:stage, env:STAGE, 'dev'}
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    IMAGE_BUCKET: ${self:service}-images-${self:provider.stage}
    THUMBNAIL_WIDTH: ${env:THUMBNAIL_WIDTH, 150}
    THUMBNAIL_HEIGHT: ${env:THUMBNAIL_HEIGHT, 150}
    THUMBNAIL_QUALITY: ${env:THUMBNAIL_QUALITY, 80}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource: 
            - !GetAtt DynamodbTable.Arn
            - !Join ['', [!GetAtt DynamodbTable.Arn, '/index/*']]
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource: 
            - !GetAtt ImageBucket.Arn
            - !Join ['', [!GetAtt ImageBucket.Arn, '/*']]
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminRespondToAuthChallenge
          Resource: !GetAtt CognitoUserPool.Arn

plugins:
  - serverless-appsync-plugin
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: 'npm'
    excludeFiles: src/**/*.test.js

  appSync:
    name: ${self:service}-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      userPoolId: !Ref CognitoUserPool
      defaultAction: ALLOW
    schema: ./src/api/schema.graphql                      # Path to your schema file
    mappingTemplatesLocation: src/resolvers             # Base path for VTL files
    mappingTemplates: ${file(src/resources/mapping-templates.yml)}
    dataSources:
      - type: AMAZON_DYNAMODB
        name: DynamoDBDataSource
        config:
          tableName: !Ref DynamodbTable
          serviceRoleArn: arn:aws:iam::${aws:accountId}:role/AppSyncServiceRole
      - type: AWS_LAMBDA
        name: ImageProcessorDataSource
        config:
          functionName: imageProcessor
          serviceRoleArn: arn:aws:iam::${aws:accountId}:role/ImageProcessorRole
      - type: NONE
        name: NoneDataSource
    additionalAuthentications: []
    xrayEnabled: true
    defaultMappingTemplates:
      request: false
      response: false
    cors:
      origin: '*'
      headers: ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent']
    sandbox:
      port: 4001
      debug: true
      graphiql: true

  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    websocketPort: 4001
    noPrependStageInUrl: true
    useChildProcesses: true
    corsAllowOrigin: '*'
    corsAllowHeaders: 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'

resources:
  - ${file(src/resources/dynamodb-config.yml)}
  - ${file(src/resources/cognito-config.yml)}
  - ${file(src/resources/s3-config.yml)}

functions:
  imageProcessor:
    handler: src/utils/image-processor.js
    name: ${self:service}-${self:provider.stage}-imageProcessor
    memorySize: 1024
    timeout: 60
    events:
      - s3:
          bucket: ${self:provider.environment.IMAGE_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
