'use strict'

// tests for dwelling-create
// Generated by serverless-mocha-plugin
const AWS = require('aws-sdk')
const Promise = require('bluebird')
const request = require('request')
const mochaPlugin = require('serverless-mocha-plugin')
const util = require('./util')

// set AWS credentials because the test cases are invoked from local context
let credentials = new AWS.SharedIniFileCredentials({profile: 'hopo'})
AWS.config.credentials = credentials

const expect = mochaPlugin.chai.expect
let wrapped = mochaPlugin.getWrapper('dwelling-create', '/functions/dwelling/create/create.js', 'index')

const username = 'steven'
const password = 'AAAaaa$$$000'
const dwellingName = 'name-' + String(new Date().getTime())
const dwellingType = 'type-' + String(new Date().getTime())

describe('dwelling-create', () => {
  // pre-processor: clear existing dwelling for current user
  before((done) => {
    done()
  })
  
  beforeEach((done) => {
    request(util.getLoginPayload(username, password), function (error1, response1, body1) {
      global.idToken = JSON.parse(body1).idToken
      request(util.getClearUserDataPayload(global.idToken), function (error2, response2, body2) {
        done()
      })
    })
  })

  // case1: create-success
  it('should create a dwelling', () => {
    let data = {
      dwellingName: dwellingName,
      dwellingType: dwellingType,
      dwellingRooms: 1
    }

    return wrapped.run(util.createEvent(username, data)).then((response) => {
      // status code is 200
      expect(response).to.have.property('statusCode', 200)

      // dwelling is created with correct values
      let body = JSON.parse(response.body)
      expect(body).to.be.an.object
      expect(body).to.have.property('identityId', username)
      expect(body).to.have.property('dwellingName', dwellingName)
      expect(body).to.have.property('deletedFlag', 0)

    })
  })

  // case2: create-fail-missing-field
  it('should NOT create a dwelling due to missing field', () => {
    let data = {
      dwellingName: dwellingName,
      dwellingType: dwellingType
    }

    return wrapped.run(util.createEvent(username, data)).then((response) => {
      // status code is 422
      expect(response).to.have.property('statusCode', 422)

      // error message is returned
      let body = JSON.parse(response.body)
      expect(body).to.be.an.object
      expect(body.code).to.include(422)
      expect(body.message).to.not.eql(null)
    })
  })

  // case3: create-fail-dwelling-exist
  it('should NOT create a dwelling due to dwelling exists for current user', () => {
    let data = {
      dwellingName: dwellingName,
      dwellingType: dwellingType,
      dwellingRooms: 1
    }

    return new Promise(function (resolve, reject) {
      request(util.getCreateDwellingPayload(global.idToken, data), function (error, response, body) {
        resolve()
      })
    })
    .then(function () {
      return wrapped.run(util.createEvent(username, data)).then((response) => {
        // status code is 422
        expect(response).to.have.property('statusCode', 422)

        // error message is returned
        let body = JSON.parse(response.body)
        expect(body).to.be.an.object
        expect(body.code).to.include(422)
        expect(body.message).to.not.eql(null)
      })
    })
  })
})
